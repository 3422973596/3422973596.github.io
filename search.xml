<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何在Hexo上发布第一个博客</title>
      <link href="/2020/05/07/markdown-jiao-cheng/"/>
      <url>/2020/05/07/markdown-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在hexo上发布第一张博客"><a href="#如何在hexo上发布第一张博客" class="headerlink" title="如何在hexo上发布第一张博客"></a>如何在hexo上发布第一张博客</h1><h2 id="所用到的工具："><a href="#所用到的工具：" class="headerlink" title="所用到的工具："></a>所用到的工具：</h2><ul><li>markdown：Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。</li><li>vscode:一种轻量级的代码编辑器<h2 id="需要了解的知识"><a href="#需要了解的知识" class="headerlink" title="需要了解的知识"></a>需要了解的知识</h2><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3></li><li>参见<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a><h3 id="文章Front-matter介绍-markdown开头的部分"><a href="#文章Front-matter介绍-markdown开头的部分" class="headerlink" title="文章Front-matter介绍(markdown开头的部分)"></a>文章Front-matter介绍(markdown开头的部分)</h3><table><thead><tr><th align="center">配置选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">Markdown 的文件标题</td><td align="center">文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="center">文件创建时的日期时间</td><td align="center">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="center">author</td><td align="center">根 _config.yml 中的 author</td><td align="center">文章作者</td></tr><tr><td align="center">img</td><td align="center">featureImages 中的某个值</td><td align="center">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></td></tr><tr><td align="center">top</td><td align="center">true</td><td align="center">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center">false</td><td align="center">v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td align="center">v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td align="center">toc</td><td align="center">true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td align="center">mathjax</td><td align="center">false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr><tr><td align="center">keywords</td><td align="center">文章标题</td><td align="center">文章关键字，SEO 时需要</td></tr><tr><td align="center">reprintPolicy</td><td align="center">cc_by</td><td align="center">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre><code>  ---  title: typora-vue-theme主题介绍  date: 2018-09-07 09:25:00  ---</code></pre></li></ul><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:- Typora- Markdown---</code></pre><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>1 .首先在博客目录打开git bash 用<code>hexo n "文章名字"</code>创建一个文章<br>2 .在博客目录下的source目录下的_post目录下找到刚刚创建的文章的markdown文件<br>3 .用vscode打开该文件，使用markdown语法来写一篇文章</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列车调度问题</title>
      <link href="/2020/05/07/lie-che-diao-du-wen-ti/"/>
      <url>/2020/05/07/lie-che-diao-du-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="列车调度"><a href="#列车调度" class="headerlink" title="列车调度"></a>列车调度</h1><p>火车站的铁轨的结构如下图所示。</p><p><img src="https://images.ptausercontent.com/188" alt></p><p>两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有N条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？</p><p>输入格式：<br> 输入第一行给出一个整数N (2 ≤ N ≤10的5次方),下一行给出从1到N的整数序号的一个重排列。数字间以空格分隔。</p><p> 输出格式：<br> 在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。</p><p>输入样例：</p><pre><code>98 4 2 5 3 9 1 6 7</code></pre><p>输出样例：</p><pre><code>4</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>这个题目就是看能够产生多少个对列,这些队列都是由大到小排列<br>比如说这个例子 4&lt;8 所以应为84在同一轨道，2&lt;4所以是842在同一轨道<br>，为了方便,把这份轨道命名为1轨道</p></li><li><p>5&gt;2所以5又在一个新的轨道同理这个轨道有5 3，为了方便,把这份轨道命名为2轨道</p></li><li><p>同理下一轨道有9,为了方便,把这份轨道命名为3轨道</p></li><li><p>注意这里的1因去找3个轨道最小的那么他应该在1轨道</p></li><li><p>同理去处理6 7</p></li><li><p>得到如下4个轨道：</p></li><li><p>1轨道：8421</p></li><li><p>2轨道：53</p></li><li><p>3轨道：96</p></li><li><p>4轨道：7</p></li><li><p>由于我们只需知道一个轨道的末尾元素，即可做出判断,插入新元素的时候我们需不需要在增加一个轨道，因此我们选择用set插入元素，如果我们插入的元素在已有的轨道，那么我们区删除离它最近的元素(即我们同一轨道只留最小的那个值),执行完毕之后set这个集合的元素为每一轨道的最小值，我们再去求它的size就可以知道我们需要几个轨道了  </p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><pre><code>#include&lt;iostream&gt;#include&lt;set&gt;using namespace std;int main() {  set&lt;int&gt; s;  int n, t;  cin &gt;&gt; n &gt;&gt; t;  s.insert(t);  for (int i = 2; i &lt;= n; i++) {      cin &gt;&gt; t;      if (t &lt; *s.rbegin()) {          s.erase(s.upper_bound(t));      }      s.insert(t);  }  cout &lt;&lt; s.size();}</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令集合</title>
      <link href="/2020/05/07/hexo-chang-yong-ming-ling-ji-he/"/>
      <url>/2020/05/07/hexo-chang-yong-ming-ling-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="常用hexo命令集合"><a href="#常用hexo命令集合" class="headerlink" title="常用hexo命令集合"></a>常用hexo命令集合</h1><h2 id="hexo官方文档"><a href="#hexo官方文档" class="headerlink" title="hexo官方文档"></a>hexo官方文档</h2><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a>，这个是hexo的官方文档，详细介绍了hexo的安装和使用<h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h2></li><li><code>hexo server</code>#启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</li><li><code>hexo server -s</code> #以静态模式启动</li><li><code>hexo server -p 5000</code> #更改访问端口   (默认端口为4000，’ctrl + c’关闭server)</li><li><code>hexo server -i</code>IP地址 #自定义 IP</li><li><code>hexo clean</code>#清除缓存  ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</li><li><code>hexo g</code> #生成静态网页  (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“   下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “   路径下)</li><li><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)</li><li><code>hexo init</code> 文件夹名称 #初始化XX文件夹名称</li><li><code>npm update hexo -g</code>#升级</li><li><code>npm install hexo -g</code> #安装</li><li><code>node-v</code>          #查看node.js版本号</li><li><code>npm -v</code>        #查看npm版本号</li><li><code>git --version</code>  #查看git版本号</li><li><code>hexo -v</code>      #查看hexo版本号<h2 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h2></li><li><code>hexo n "我的第一篇文章"</code> 等价于  <code>hexo new "我的第一篇文章"</code> 还等价于 <code>hexo new post "我的第一篇文章"</code></li><li><code>hexo p</code>等价于<code>hexo publish</code></li><li><code>hexo g</code>等价于<code>hexo generate</code></li><li><code>hexo s</code>等价于<code>hexo server</code></li><li><code>hexo d</code>等价于<code>hexo deploy</code></li><li><code>hexo g -d</code>等价于<code>hexo generate --deploy</code></li><li>注: <code>hexo clean</code> 没有简写,  <code>git --version</code> 没有简写  </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs编译器美化</title>
      <link href="/2020/05/07/vs-bian-yi-qi-mei-hua/"/>
      <url>/2020/05/07/vs-bian-yi-qi-mei-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="vs美化"><a href="#vs美化" class="headerlink" title="vs美化"></a>vs美化</h1><h2 id="需要用到的vs扩展模块："><a href="#需要用到的vs扩展模块：" class="headerlink" title="需要用到的vs扩展模块："></a>需要用到的vs扩展模块：</h2><ul><li>ClaudiaIDE(更换IDE背景图片)</li><li>Color theme Editor for VS2019(这里是我的版本，对应版本有对应版本的模块)(设置透明主题)<h2 id="第一步下载并且安装上面的俩个模块"><a href="#第一步下载并且安装上面的俩个模块" class="headerlink" title="第一步下载并且安装上面的俩个模块"></a>第一步下载并且安装上面的俩个模块</h2></li><li>注意下载完毕之后需要重启才能安装<h2 id="第二步配置ClaudiaIDE："><a href="#第二步配置ClaudiaIDE：" class="headerlink" title="第二步配置ClaudiaIDE："></a>第二步配置ClaudiaIDE：</h2><h3 id="1-在工具选项中找到ClaudiaIDE"><a href="#1-在工具选项中找到ClaudiaIDE" class="headerlink" title="1.在工具选项中找到ClaudiaIDE"></a>1.在工具选项中找到ClaudiaIDE</h3></li><li>如图所示<br><img src="/2020/05/07/vs-bian-yi-qi-mei-hua/1.png" alt="1"><h3 id="2-找到扩展到IDE改为True"><a href="#2-找到扩展到IDE改为True" class="headerlink" title="2.找到扩展到IDE改为True"></a>2.找到扩展到IDE改为True</h3><h3 id="3-找到图片拉伸改为fill"><a href="#3-找到图片拉伸改为fill" class="headerlink" title="3.找到图片拉伸改为fill"></a>3.找到图片拉伸改为fill</h3><h3 id="4-把图片路径改为你想设置的图片-这里注意图片的分辨率-1080的分辨率就可以"><a href="#4-把图片路径改为你想设置的图片-这里注意图片的分辨率-1080的分辨率就可以" class="headerlink" title="4.把图片路径改为你想设置的图片(这里注意图片的分辨率 1080的分辨率就可以)"></a>4.把图片路径改为你想设置的图片(这里注意图片的分辨率 1080的分辨率就可以)</h3></li><li>如图片的设置<br><img src="/2020/05/07/vs-bian-yi-qi-mei-hua/2.png" alt="2"><h2 id="第三步用Color-theme-Editor-for-VS2019配置透明主题"><a href="#第三步用Color-theme-Editor-for-VS2019配置透明主题" class="headerlink" title="第三步用Color theme Editor for VS2019配置透明主题"></a>第三步用Color theme Editor for VS2019配置透明主题</h2><h3 id="1-点击下载主题文件-提取密码：1v32"><a href="#1-点击下载主题文件-提取密码：1v32" class="headerlink" title="1.点击下载主题文件 提取密码：1v32"></a>1.<a href="https://pan.baidu.com/s/1XpwODlRvjUV8TGsdOh79BA" target="_blank" rel="noopener">点击下载主题文件</a> 提取密码：1v32</h3><h3 id="2-打开Color-theme-Editor-for-VS2019"><a href="#2-打开Color-theme-Editor-for-VS2019" class="headerlink" title="2.打开Color theme Editor for VS2019"></a>2.打开Color theme Editor for VS2019</h3><img src="/2020/05/07/vs-bian-yi-qi-mei-hua/3.png" alt="3"><h3 id="3-导入配置文件-单击后找到你刚刚下载的主题文件"><a href="#3-导入配置文件-单击后找到你刚刚下载的主题文件" class="headerlink" title="3.导入配置文件 单击后找到你刚刚下载的主题文件"></a>3.导入配置文件 单击后找到你刚刚下载的主题文件</h3><img src="/2020/05/07/vs-bian-yi-qi-mei-hua/4.png" alt="4"><h3 id="然后重启vs就能看到效果了"><a href="#然后重启vs就能看到效果了" class="headerlink" title="然后重启vs就能看到效果了"></a>然后重启vs就能看到效果了</h3><img src="/2020/05/07/vs-bian-yi-qi-mei-hua/my.jpg" alt="my"><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588829404831&amp;di=633bd8770c76e590b6f2b3d1b549b563&amp;imgtype=0&amp;src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F694bd63ef1bc9c8270da4e06f92c58633c4c962212786-RILTht_fw658" alt="图片"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/06/hello-world/"/>
      <url>/2020/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
